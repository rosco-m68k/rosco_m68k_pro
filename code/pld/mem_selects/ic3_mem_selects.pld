GAL22V10
MEMSELS

ROMS   RAMS   A22    A21    A1     A0     RW     NC     NC     SIZ0   SIZ1   GND
ZRAMS  RAMEN0 RAMEN1 RAMEN2 RAMEN3 ROMEN0 ROMEN1 ROMEN2 ROMEN3 DSA0   DSA1   VCC

ROMEN0  = ROMS * A22 * A21 * /A1 * /RW *       /SIZ0 *  SIZ1
        + ROMS * A22 * A21 * /A0 * /A1 * /RW *  SIZ0
        + ROMS * A22 * A21 * /A0 * /RW *        SIZ0 * /SIZ1
        + ROMS * A22 * A21 * /A1 * /RW *        SIZ0 * /SIZ1

ROMEN1  = ROMS * A22 * A21 * /A0 * /A1 * /RW * /SIZ0 *  SIZ1
        + ROMS * A22 * A21 * /A1 * /RW *        SIZ0 * /SIZ1
        + ROMS * A22 * A21 *  A0 *  A1 * /RW


ROMEN2  = ROMS * A22 * A21 * /A0 * /RW *        SIZ0 * /SIZ1
        + ROMS * A22 * A21 *  A1 * /RW

ROMEN3  = ROMS * A22 * A21 *  A1 * /RW 
        + ROMS * A22 * A21 *  A0 * /RW

RAMEN0  = RAMS * A22 * A21 * /A1 * /RW *       /SIZ0 *  SIZ1
        + RAMS * A22 * A21 * /A0 * /A1 * /RW *  SIZ0
        + RAMS * A22 * A21 * /A0 * /RW *        SIZ0 * /SIZ1
        + RAMS * A22 * A21 * /A1 * /RW *        SIZ0 * /SIZ1

RAMEN1  = RAMS * A22 * A21 * /A0 * /A1 * /RW * /SIZ0 *  SIZ1
        + RAMS * A22 * A21 * /A1 * /RW *        SIZ0 * /SIZ1
        + RAMS * A22 * A21 *  A0 *  A1 * /RW


RAMEN2  = RAMS * A22 * A21 * /A0 * /RW *        SIZ0 * /SIZ1
        + RAMS * A22 * A21 *  A1 * /RW

RAMEN3  = RAMS * A22 * A21 *  A1 * /RW 
        + RAMS * A22 * A21 *  A0 * /RW

/DSA0   = /ROMEN0
        + /ROMEN1
        + /ROMEN2
        + /ROMEN3
        + /RAMEN0
        + /RAMEN1
        + /RAMEN2
        + /RAMEN3
 
DSA1    = /ROMEN0
        + /ROMEN1
        + /ROMEN2
        + /ROMEN3
        + /RAMEN0
        + /RAMEN1
        + /RAMEN2
        + /RAMEN3

DESCRIPTION

rosco_m68k Pro L2 Address Decoder (IC3) - Provides selects for onboard memory (except 
for the ZRAM, which is handled elsewhere, or perhaps not at all... The select is here
for possible future use though).

Copyright (c)2021 Ross Bamford & Contributors
See LICENSE.md for licence details (spoiler: CERN / MIT).

Chip selects for onboard memory (both ROM and RAM) are generated by equations that are heavily
influenced by the Motorola reference implementation. The basic equations (which are modified 
above to select RAM or ROM as appropriate) are:

    For 32-bit ports (RAM, ROM):

    UUDS    =  A1 * /RW 
            +  A0 * /RW

    UMDS    = /A0 * /RW *        SIZ0 * /SIZ1
            +  A1 * /RW

    LMDS    = /A0 * /A1 * /RW * /SIZ0 *  SIZ1
            + /A1 * /RW *        SIZ0 * /SIZ1
            +  A0 *  A1 * /RW

    LLDS    = /A1 * /RW *       /SIZ0 *  SIZ1
            + /A0 * /A1 * /RW *  SIZ0
            + /A0 * /RW *        SIZ0 * /SIZ1
            + /A1 * /RW *        SIZ0 * /SIZ1

    For 16-bit ports (ZRAM, where available):
    UDS     =  A0 * /RW
    LDS     = /A0 * /RW * SIZ0 * /SIZ1

The onboard memory devices are numbered 0-3, where 0 is the least-significant byte (LLDS in the 
notation above connecting to D0-D7), and 3 is the most-significant byte (UUDS above, connecting
to D24-D31).

The address spaces decoded by this IC are as follows:

(N.B. Bits indicated which * are decoded by L1 decoder).

============================================================================================================
RAM:
Addr       => 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9  8  7  6  5  4  3  2  1  0
------------|-----------------------------------------------------------------------------------------------
0x00000000 => 0* 0* 0* 0* 0* 0* 0* 0* 0* 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
    ...
    ...
    ...
0x001fffff => 0* 0* 0* 0* 0* 0* 0* 0* 0* 0  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1


============================================================================================================
ROM: 
Addr       => 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9  8  7  6  5  4  3  2  1  0
------------|-----------------------------------------------------------------------------------------------
0xff000000 => 1* 1* 1* 1* 1* 1* 1* 1* 0* 0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0  0
    ...
    ...
    ...
0xff1fffff => 1* 1* 1* 1* 1* 1* 1* 1* 0* 0  0  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1

